/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.aug3.logservice.thrift.log;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LogParam implements org.apache.thrift.TBase<LogParam, LogParam._Fields>, java.io.Serializable, Cloneable, Comparable<LogParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LogParam");

  private static final org.apache.thrift.protocol.TField COMPONENT_FIELD_DESC = new org.apache.thrift.protocol.TField("component", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("action", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField UTYP_FIELD_DESC = new org.apache.thrift.protocol.TField("utyp", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SESSIONID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionid", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField REQPATH_FIELD_DESC = new org.apache.thrift.protocol.TField("reqpath", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("req", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField COOKIES_FIELD_DESC = new org.apache.thrift.protocol.TField("cookies", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField REFERER_FIELD_DESC = new org.apache.thrift.protocol.TField("referer", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField BROWSER_FIELD_DESC = new org.apache.thrift.protocol.TField("browser", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.MAP, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LogParamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LogParamTupleSchemeFactory());
  }

  public int component; // required
  public int action; // required
  public long uid; // required
  public int utyp; // required
  public String sessionid; // required
  public String ip; // required
  public String host; // required
  public String reqpath; // required
  public String params; // required
  public String req; // required
  public String cookies; // required
  public String referer; // required
  public String browser; // required
  public Map<String,String> msg; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMPONENT((short)1, "component"),
    ACTION((short)2, "action"),
    UID((short)3, "uid"),
    UTYP((short)4, "utyp"),
    SESSIONID((short)5, "sessionid"),
    IP((short)6, "ip"),
    HOST((short)7, "host"),
    REQPATH((short)8, "reqpath"),
    PARAMS((short)9, "params"),
    REQ((short)10, "req"),
    COOKIES((short)11, "cookies"),
    REFERER((short)12, "referer"),
    BROWSER((short)13, "browser"),
    MSG((short)14, "msg");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMPONENT
          return COMPONENT;
        case 2: // ACTION
          return ACTION;
        case 3: // UID
          return UID;
        case 4: // UTYP
          return UTYP;
        case 5: // SESSIONID
          return SESSIONID;
        case 6: // IP
          return IP;
        case 7: // HOST
          return HOST;
        case 8: // REQPATH
          return REQPATH;
        case 9: // PARAMS
          return PARAMS;
        case 10: // REQ
          return REQ;
        case 11: // COOKIES
          return COOKIES;
        case 12: // REFERER
          return REFERER;
        case 13: // BROWSER
          return BROWSER;
        case 14: // MSG
          return MSG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COMPONENT_ISSET_ID = 0;
  private static final int __ACTION_ISSET_ID = 1;
  private static final int __UID_ISSET_ID = 2;
  private static final int __UTYP_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.MSG};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMPONENT, new org.apache.thrift.meta_data.FieldMetaData("component", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTION, new org.apache.thrift.meta_data.FieldMetaData("action", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UTYP, new org.apache.thrift.meta_data.FieldMetaData("utyp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SESSIONID, new org.apache.thrift.meta_data.FieldMetaData("sessionid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQPATH, new org.apache.thrift.meta_data.FieldMetaData("reqpath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQ, new org.apache.thrift.meta_data.FieldMetaData("req", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COOKIES, new org.apache.thrift.meta_data.FieldMetaData("cookies", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFERER, new org.apache.thrift.meta_data.FieldMetaData("referer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BROWSER, new org.apache.thrift.meta_data.FieldMetaData("browser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LogParam.class, metaDataMap);
  }

  public LogParam() {
  }

  public LogParam(
    int component,
    int action,
    long uid,
    int utyp,
    String sessionid,
    String ip,
    String host,
    String reqpath,
    String params,
    String req,
    String cookies,
    String referer,
    String browser)
  {
    this();
    this.component = component;
    setComponentIsSet(true);
    this.action = action;
    setActionIsSet(true);
    this.uid = uid;
    setUidIsSet(true);
    this.utyp = utyp;
    setUtypIsSet(true);
    this.sessionid = sessionid;
    this.ip = ip;
    this.host = host;
    this.reqpath = reqpath;
    this.params = params;
    this.req = req;
    this.cookies = cookies;
    this.referer = referer;
    this.browser = browser;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LogParam(LogParam other) {
    __isset_bitfield = other.__isset_bitfield;
    this.component = other.component;
    this.action = other.action;
    this.uid = other.uid;
    this.utyp = other.utyp;
    if (other.isSetSessionid()) {
      this.sessionid = other.sessionid;
    }
    if (other.isSetIp()) {
      this.ip = other.ip;
    }
    if (other.isSetHost()) {
      this.host = other.host;
    }
    if (other.isSetReqpath()) {
      this.reqpath = other.reqpath;
    }
    if (other.isSetParams()) {
      this.params = other.params;
    }
    if (other.isSetReq()) {
      this.req = other.req;
    }
    if (other.isSetCookies()) {
      this.cookies = other.cookies;
    }
    if (other.isSetReferer()) {
      this.referer = other.referer;
    }
    if (other.isSetBrowser()) {
      this.browser = other.browser;
    }
    if (other.isSetMsg()) {
      Map<String,String> __this__msg = new HashMap<String,String>(other.msg);
      this.msg = __this__msg;
    }
  }

  public LogParam deepCopy() {
    return new LogParam(this);
  }

  @Override
  public void clear() {
    setComponentIsSet(false);
    this.component = 0;
    setActionIsSet(false);
    this.action = 0;
    setUidIsSet(false);
    this.uid = 0;
    setUtypIsSet(false);
    this.utyp = 0;
    this.sessionid = null;
    this.ip = null;
    this.host = null;
    this.reqpath = null;
    this.params = null;
    this.req = null;
    this.cookies = null;
    this.referer = null;
    this.browser = null;
    this.msg = null;
  }

  public int getComponent() {
    return this.component;
  }

  public LogParam setComponent(int component) {
    this.component = component;
    setComponentIsSet(true);
    return this;
  }

  public void unsetComponent() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPONENT_ISSET_ID);
  }

  /** Returns true if field component is set (has been assigned a value) and false otherwise */
  public boolean isSetComponent() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPONENT_ISSET_ID);
  }

  public void setComponentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPONENT_ISSET_ID, value);
  }

  public int getAction() {
    return this.action;
  }

  public LogParam setAction(int action) {
    this.action = action;
    setActionIsSet(true);
    return this;
  }

  public void unsetAction() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTION_ISSET_ID);
  }

  /** Returns true if field action is set (has been assigned a value) and false otherwise */
  public boolean isSetAction() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTION_ISSET_ID);
  }

  public void setActionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTION_ISSET_ID, value);
  }

  public long getUid() {
    return this.uid;
  }

  public LogParam setUid(long uid) {
    this.uid = uid;
    setUidIsSet(true);
    return this;
  }

  public void unsetUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
  }

  public void setUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
  }

  public int getUtyp() {
    return this.utyp;
  }

  public LogParam setUtyp(int utyp) {
    this.utyp = utyp;
    setUtypIsSet(true);
    return this;
  }

  public void unsetUtyp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UTYP_ISSET_ID);
  }

  /** Returns true if field utyp is set (has been assigned a value) and false otherwise */
  public boolean isSetUtyp() {
    return EncodingUtils.testBit(__isset_bitfield, __UTYP_ISSET_ID);
  }

  public void setUtypIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UTYP_ISSET_ID, value);
  }

  public String getSessionid() {
    return this.sessionid;
  }

  public LogParam setSessionid(String sessionid) {
    this.sessionid = sessionid;
    return this;
  }

  public void unsetSessionid() {
    this.sessionid = null;
  }

  /** Returns true if field sessionid is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionid() {
    return this.sessionid != null;
  }

  public void setSessionidIsSet(boolean value) {
    if (!value) {
      this.sessionid = null;
    }
  }

  public String getIp() {
    return this.ip;
  }

  public LogParam setIp(String ip) {
    this.ip = ip;
    return this;
  }

  public void unsetIp() {
    this.ip = null;
  }

  /** Returns true if field ip is set (has been assigned a value) and false otherwise */
  public boolean isSetIp() {
    return this.ip != null;
  }

  public void setIpIsSet(boolean value) {
    if (!value) {
      this.ip = null;
    }
  }

  public String getHost() {
    return this.host;
  }

  public LogParam setHost(String host) {
    this.host = host;
    return this;
  }

  public void unsetHost() {
    this.host = null;
  }

  /** Returns true if field host is set (has been assigned a value) and false otherwise */
  public boolean isSetHost() {
    return this.host != null;
  }

  public void setHostIsSet(boolean value) {
    if (!value) {
      this.host = null;
    }
  }

  public String getReqpath() {
    return this.reqpath;
  }

  public LogParam setReqpath(String reqpath) {
    this.reqpath = reqpath;
    return this;
  }

  public void unsetReqpath() {
    this.reqpath = null;
  }

  /** Returns true if field reqpath is set (has been assigned a value) and false otherwise */
  public boolean isSetReqpath() {
    return this.reqpath != null;
  }

  public void setReqpathIsSet(boolean value) {
    if (!value) {
      this.reqpath = null;
    }
  }

  public String getParams() {
    return this.params;
  }

  public LogParam setParams(String params) {
    this.params = params;
    return this;
  }

  public void unsetParams() {
    this.params = null;
  }

  /** Returns true if field params is set (has been assigned a value) and false otherwise */
  public boolean isSetParams() {
    return this.params != null;
  }

  public void setParamsIsSet(boolean value) {
    if (!value) {
      this.params = null;
    }
  }

  public String getReq() {
    return this.req;
  }

  public LogParam setReq(String req) {
    this.req = req;
    return this;
  }

  public void unsetReq() {
    this.req = null;
  }

  /** Returns true if field req is set (has been assigned a value) and false otherwise */
  public boolean isSetReq() {
    return this.req != null;
  }

  public void setReqIsSet(boolean value) {
    if (!value) {
      this.req = null;
    }
  }

  public String getCookies() {
    return this.cookies;
  }

  public LogParam setCookies(String cookies) {
    this.cookies = cookies;
    return this;
  }

  public void unsetCookies() {
    this.cookies = null;
  }

  /** Returns true if field cookies is set (has been assigned a value) and false otherwise */
  public boolean isSetCookies() {
    return this.cookies != null;
  }

  public void setCookiesIsSet(boolean value) {
    if (!value) {
      this.cookies = null;
    }
  }

  public String getReferer() {
    return this.referer;
  }

  public LogParam setReferer(String referer) {
    this.referer = referer;
    return this;
  }

  public void unsetReferer() {
    this.referer = null;
  }

  /** Returns true if field referer is set (has been assigned a value) and false otherwise */
  public boolean isSetReferer() {
    return this.referer != null;
  }

  public void setRefererIsSet(boolean value) {
    if (!value) {
      this.referer = null;
    }
  }

  public String getBrowser() {
    return this.browser;
  }

  public LogParam setBrowser(String browser) {
    this.browser = browser;
    return this;
  }

  public void unsetBrowser() {
    this.browser = null;
  }

  /** Returns true if field browser is set (has been assigned a value) and false otherwise */
  public boolean isSetBrowser() {
    return this.browser != null;
  }

  public void setBrowserIsSet(boolean value) {
    if (!value) {
      this.browser = null;
    }
  }

  public int getMsgSize() {
    return (this.msg == null) ? 0 : this.msg.size();
  }

  public void putToMsg(String key, String val) {
    if (this.msg == null) {
      this.msg = new HashMap<String,String>();
    }
    this.msg.put(key, val);
  }

  public Map<String,String> getMsg() {
    return this.msg;
  }

  public LogParam setMsg(Map<String,String> msg) {
    this.msg = msg;
    return this;
  }

  public void unsetMsg() {
    this.msg = null;
  }

  /** Returns true if field msg is set (has been assigned a value) and false otherwise */
  public boolean isSetMsg() {
    return this.msg != null;
  }

  public void setMsgIsSet(boolean value) {
    if (!value) {
      this.msg = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMPONENT:
      if (value == null) {
        unsetComponent();
      } else {
        setComponent((Integer)value);
      }
      break;

    case ACTION:
      if (value == null) {
        unsetAction();
      } else {
        setAction((Integer)value);
      }
      break;

    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((Long)value);
      }
      break;

    case UTYP:
      if (value == null) {
        unsetUtyp();
      } else {
        setUtyp((Integer)value);
      }
      break;

    case SESSIONID:
      if (value == null) {
        unsetSessionid();
      } else {
        setSessionid((String)value);
      }
      break;

    case IP:
      if (value == null) {
        unsetIp();
      } else {
        setIp((String)value);
      }
      break;

    case HOST:
      if (value == null) {
        unsetHost();
      } else {
        setHost((String)value);
      }
      break;

    case REQPATH:
      if (value == null) {
        unsetReqpath();
      } else {
        setReqpath((String)value);
      }
      break;

    case PARAMS:
      if (value == null) {
        unsetParams();
      } else {
        setParams((String)value);
      }
      break;

    case REQ:
      if (value == null) {
        unsetReq();
      } else {
        setReq((String)value);
      }
      break;

    case COOKIES:
      if (value == null) {
        unsetCookies();
      } else {
        setCookies((String)value);
      }
      break;

    case REFERER:
      if (value == null) {
        unsetReferer();
      } else {
        setReferer((String)value);
      }
      break;

    case BROWSER:
      if (value == null) {
        unsetBrowser();
      } else {
        setBrowser((String)value);
      }
      break;

    case MSG:
      if (value == null) {
        unsetMsg();
      } else {
        setMsg((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMPONENT:
      return Integer.valueOf(getComponent());

    case ACTION:
      return Integer.valueOf(getAction());

    case UID:
      return Long.valueOf(getUid());

    case UTYP:
      return Integer.valueOf(getUtyp());

    case SESSIONID:
      return getSessionid();

    case IP:
      return getIp();

    case HOST:
      return getHost();

    case REQPATH:
      return getReqpath();

    case PARAMS:
      return getParams();

    case REQ:
      return getReq();

    case COOKIES:
      return getCookies();

    case REFERER:
      return getReferer();

    case BROWSER:
      return getBrowser();

    case MSG:
      return getMsg();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMPONENT:
      return isSetComponent();
    case ACTION:
      return isSetAction();
    case UID:
      return isSetUid();
    case UTYP:
      return isSetUtyp();
    case SESSIONID:
      return isSetSessionid();
    case IP:
      return isSetIp();
    case HOST:
      return isSetHost();
    case REQPATH:
      return isSetReqpath();
    case PARAMS:
      return isSetParams();
    case REQ:
      return isSetReq();
    case COOKIES:
      return isSetCookies();
    case REFERER:
      return isSetReferer();
    case BROWSER:
      return isSetBrowser();
    case MSG:
      return isSetMsg();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LogParam)
      return this.equals((LogParam)that);
    return false;
  }

  public boolean equals(LogParam that) {
    if (that == null)
      return false;

    boolean this_present_component = true;
    boolean that_present_component = true;
    if (this_present_component || that_present_component) {
      if (!(this_present_component && that_present_component))
        return false;
      if (this.component != that.component)
        return false;
    }

    boolean this_present_action = true;
    boolean that_present_action = true;
    if (this_present_action || that_present_action) {
      if (!(this_present_action && that_present_action))
        return false;
      if (this.action != that.action)
        return false;
    }

    boolean this_present_uid = true;
    boolean that_present_uid = true;
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (this.uid != that.uid)
        return false;
    }

    boolean this_present_utyp = true;
    boolean that_present_utyp = true;
    if (this_present_utyp || that_present_utyp) {
      if (!(this_present_utyp && that_present_utyp))
        return false;
      if (this.utyp != that.utyp)
        return false;
    }

    boolean this_present_sessionid = true && this.isSetSessionid();
    boolean that_present_sessionid = true && that.isSetSessionid();
    if (this_present_sessionid || that_present_sessionid) {
      if (!(this_present_sessionid && that_present_sessionid))
        return false;
      if (!this.sessionid.equals(that.sessionid))
        return false;
    }

    boolean this_present_ip = true && this.isSetIp();
    boolean that_present_ip = true && that.isSetIp();
    if (this_present_ip || that_present_ip) {
      if (!(this_present_ip && that_present_ip))
        return false;
      if (!this.ip.equals(that.ip))
        return false;
    }

    boolean this_present_host = true && this.isSetHost();
    boolean that_present_host = true && that.isSetHost();
    if (this_present_host || that_present_host) {
      if (!(this_present_host && that_present_host))
        return false;
      if (!this.host.equals(that.host))
        return false;
    }

    boolean this_present_reqpath = true && this.isSetReqpath();
    boolean that_present_reqpath = true && that.isSetReqpath();
    if (this_present_reqpath || that_present_reqpath) {
      if (!(this_present_reqpath && that_present_reqpath))
        return false;
      if (!this.reqpath.equals(that.reqpath))
        return false;
    }

    boolean this_present_params = true && this.isSetParams();
    boolean that_present_params = true && that.isSetParams();
    if (this_present_params || that_present_params) {
      if (!(this_present_params && that_present_params))
        return false;
      if (!this.params.equals(that.params))
        return false;
    }

    boolean this_present_req = true && this.isSetReq();
    boolean that_present_req = true && that.isSetReq();
    if (this_present_req || that_present_req) {
      if (!(this_present_req && that_present_req))
        return false;
      if (!this.req.equals(that.req))
        return false;
    }

    boolean this_present_cookies = true && this.isSetCookies();
    boolean that_present_cookies = true && that.isSetCookies();
    if (this_present_cookies || that_present_cookies) {
      if (!(this_present_cookies && that_present_cookies))
        return false;
      if (!this.cookies.equals(that.cookies))
        return false;
    }

    boolean this_present_referer = true && this.isSetReferer();
    boolean that_present_referer = true && that.isSetReferer();
    if (this_present_referer || that_present_referer) {
      if (!(this_present_referer && that_present_referer))
        return false;
      if (!this.referer.equals(that.referer))
        return false;
    }

    boolean this_present_browser = true && this.isSetBrowser();
    boolean that_present_browser = true && that.isSetBrowser();
    if (this_present_browser || that_present_browser) {
      if (!(this_present_browser && that_present_browser))
        return false;
      if (!this.browser.equals(that.browser))
        return false;
    }

    boolean this_present_msg = true && this.isSetMsg();
    boolean that_present_msg = true && that.isSetMsg();
    if (this_present_msg || that_present_msg) {
      if (!(this_present_msg && that_present_msg))
        return false;
      if (!this.msg.equals(that.msg))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(LogParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetComponent()).compareTo(other.isSetComponent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComponent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.component, other.component);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAction()).compareTo(other.isSetAction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action, other.action);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUtyp()).compareTo(other.isSetUtyp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUtyp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.utyp, other.utyp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSessionid()).compareTo(other.isSetSessionid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionid, other.sessionid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHost()).compareTo(other.isSetHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, other.host);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReqpath()).compareTo(other.isSetReqpath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReqpath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqpath, other.reqpath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReq()).compareTo(other.isSetReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.req, other.req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCookies()).compareTo(other.isSetCookies());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCookies()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cookies, other.cookies);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReferer()).compareTo(other.isSetReferer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReferer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.referer, other.referer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrowser()).compareTo(other.isSetBrowser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrowser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.browser, other.browser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsg()).compareTo(other.isSetMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LogParam(");
    boolean first = true;

    sb.append("component:");
    sb.append(this.component);
    first = false;
    if (!first) sb.append(", ");
    sb.append("action:");
    sb.append(this.action);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uid:");
    sb.append(this.uid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("utyp:");
    sb.append(this.utyp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sessionid:");
    if (this.sessionid == null) {
      sb.append("null");
    } else {
      sb.append(this.sessionid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ip:");
    if (this.ip == null) {
      sb.append("null");
    } else {
      sb.append(this.ip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("host:");
    if (this.host == null) {
      sb.append("null");
    } else {
      sb.append(this.host);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reqpath:");
    if (this.reqpath == null) {
      sb.append("null");
    } else {
      sb.append(this.reqpath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("params:");
    if (this.params == null) {
      sb.append("null");
    } else {
      sb.append(this.params);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("req:");
    if (this.req == null) {
      sb.append("null");
    } else {
      sb.append(this.req);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cookies:");
    if (this.cookies == null) {
      sb.append("null");
    } else {
      sb.append(this.cookies);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("referer:");
    if (this.referer == null) {
      sb.append("null");
    } else {
      sb.append(this.referer);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("browser:");
    if (this.browser == null) {
      sb.append("null");
    } else {
      sb.append(this.browser);
    }
    first = false;
    if (isSetMsg()) {
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LogParamStandardSchemeFactory implements SchemeFactory {
    public LogParamStandardScheme getScheme() {
      return new LogParamStandardScheme();
    }
  }

  private static class LogParamStandardScheme extends StandardScheme<LogParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LogParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMPONENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.component = iprot.readI32();
              struct.setComponentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.action = iprot.readI32();
              struct.setActionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.uid = iprot.readI64();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // UTYP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.utyp = iprot.readI32();
              struct.setUtypIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SESSIONID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sessionid = iprot.readString();
              struct.setSessionidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip = iprot.readString();
              struct.setIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.host = iprot.readString();
              struct.setHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REQPATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reqpath = iprot.readString();
              struct.setReqpathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.params = iprot.readString();
              struct.setParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.req = iprot.readString();
              struct.setReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // COOKIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cookies = iprot.readString();
              struct.setCookiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REFERER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.referer = iprot.readString();
              struct.setRefererIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BROWSER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.browser = iprot.readString();
              struct.setBrowserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.msg = new HashMap<String,String>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  String _key2;
                  String _val3;
                  _key2 = iprot.readString();
                  _val3 = iprot.readString();
                  struct.msg.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LogParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(COMPONENT_FIELD_DESC);
      oprot.writeI32(struct.component);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTION_FIELD_DESC);
      oprot.writeI32(struct.action);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UID_FIELD_DESC);
      oprot.writeI64(struct.uid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UTYP_FIELD_DESC);
      oprot.writeI32(struct.utyp);
      oprot.writeFieldEnd();
      if (struct.sessionid != null) {
        oprot.writeFieldBegin(SESSIONID_FIELD_DESC);
        oprot.writeString(struct.sessionid);
        oprot.writeFieldEnd();
      }
      if (struct.ip != null) {
        oprot.writeFieldBegin(IP_FIELD_DESC);
        oprot.writeString(struct.ip);
        oprot.writeFieldEnd();
      }
      if (struct.host != null) {
        oprot.writeFieldBegin(HOST_FIELD_DESC);
        oprot.writeString(struct.host);
        oprot.writeFieldEnd();
      }
      if (struct.reqpath != null) {
        oprot.writeFieldBegin(REQPATH_FIELD_DESC);
        oprot.writeString(struct.reqpath);
        oprot.writeFieldEnd();
      }
      if (struct.params != null) {
        oprot.writeFieldBegin(PARAMS_FIELD_DESC);
        oprot.writeString(struct.params);
        oprot.writeFieldEnd();
      }
      if (struct.req != null) {
        oprot.writeFieldBegin(REQ_FIELD_DESC);
        oprot.writeString(struct.req);
        oprot.writeFieldEnd();
      }
      if (struct.cookies != null) {
        oprot.writeFieldBegin(COOKIES_FIELD_DESC);
        oprot.writeString(struct.cookies);
        oprot.writeFieldEnd();
      }
      if (struct.referer != null) {
        oprot.writeFieldBegin(REFERER_FIELD_DESC);
        oprot.writeString(struct.referer);
        oprot.writeFieldEnd();
      }
      if (struct.browser != null) {
        oprot.writeFieldBegin(BROWSER_FIELD_DESC);
        oprot.writeString(struct.browser);
        oprot.writeFieldEnd();
      }
      if (struct.msg != null) {
        if (struct.isSetMsg()) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.msg.size()));
            for (Map.Entry<String, String> _iter4 : struct.msg.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LogParamTupleSchemeFactory implements SchemeFactory {
    public LogParamTupleScheme getScheme() {
      return new LogParamTupleScheme();
    }
  }

  private static class LogParamTupleScheme extends TupleScheme<LogParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LogParam struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetComponent()) {
        optionals.set(0);
      }
      if (struct.isSetAction()) {
        optionals.set(1);
      }
      if (struct.isSetUid()) {
        optionals.set(2);
      }
      if (struct.isSetUtyp()) {
        optionals.set(3);
      }
      if (struct.isSetSessionid()) {
        optionals.set(4);
      }
      if (struct.isSetIp()) {
        optionals.set(5);
      }
      if (struct.isSetHost()) {
        optionals.set(6);
      }
      if (struct.isSetReqpath()) {
        optionals.set(7);
      }
      if (struct.isSetParams()) {
        optionals.set(8);
      }
      if (struct.isSetReq()) {
        optionals.set(9);
      }
      if (struct.isSetCookies()) {
        optionals.set(10);
      }
      if (struct.isSetReferer()) {
        optionals.set(11);
      }
      if (struct.isSetBrowser()) {
        optionals.set(12);
      }
      if (struct.isSetMsg()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetComponent()) {
        oprot.writeI32(struct.component);
      }
      if (struct.isSetAction()) {
        oprot.writeI32(struct.action);
      }
      if (struct.isSetUid()) {
        oprot.writeI64(struct.uid);
      }
      if (struct.isSetUtyp()) {
        oprot.writeI32(struct.utyp);
      }
      if (struct.isSetSessionid()) {
        oprot.writeString(struct.sessionid);
      }
      if (struct.isSetIp()) {
        oprot.writeString(struct.ip);
      }
      if (struct.isSetHost()) {
        oprot.writeString(struct.host);
      }
      if (struct.isSetReqpath()) {
        oprot.writeString(struct.reqpath);
      }
      if (struct.isSetParams()) {
        oprot.writeString(struct.params);
      }
      if (struct.isSetReq()) {
        oprot.writeString(struct.req);
      }
      if (struct.isSetCookies()) {
        oprot.writeString(struct.cookies);
      }
      if (struct.isSetReferer()) {
        oprot.writeString(struct.referer);
      }
      if (struct.isSetBrowser()) {
        oprot.writeString(struct.browser);
      }
      if (struct.isSetMsg()) {
        {
          oprot.writeI32(struct.msg.size());
          for (Map.Entry<String, String> _iter5 : struct.msg.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            oprot.writeString(_iter5.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LogParam struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.component = iprot.readI32();
        struct.setComponentIsSet(true);
      }
      if (incoming.get(1)) {
        struct.action = iprot.readI32();
        struct.setActionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.uid = iprot.readI64();
        struct.setUidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.utyp = iprot.readI32();
        struct.setUtypIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sessionid = iprot.readString();
        struct.setSessionidIsSet(true);
      }
      if (incoming.get(5)) {
        struct.ip = iprot.readString();
        struct.setIpIsSet(true);
      }
      if (incoming.get(6)) {
        struct.host = iprot.readString();
        struct.setHostIsSet(true);
      }
      if (incoming.get(7)) {
        struct.reqpath = iprot.readString();
        struct.setReqpathIsSet(true);
      }
      if (incoming.get(8)) {
        struct.params = iprot.readString();
        struct.setParamsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.req = iprot.readString();
        struct.setReqIsSet(true);
      }
      if (incoming.get(10)) {
        struct.cookies = iprot.readString();
        struct.setCookiesIsSet(true);
      }
      if (incoming.get(11)) {
        struct.referer = iprot.readString();
        struct.setRefererIsSet(true);
      }
      if (incoming.get(12)) {
        struct.browser = iprot.readString();
        struct.setBrowserIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.msg = new HashMap<String,String>(2*_map6.size);
          for (int _i7 = 0; _i7 < _map6.size; ++_i7)
          {
            String _key8;
            String _val9;
            _key8 = iprot.readString();
            _val9 = iprot.readString();
            struct.msg.put(_key8, _val9);
          }
        }
        struct.setMsgIsSet(true);
      }
    }
  }

}

